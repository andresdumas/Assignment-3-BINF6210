############################################################################-
##-----------------------------ANALYSIS--------------------------------------
############################################################################-

##-----------------------------LIBRARIES-------------------------------------

library(rentrez) #Provides functions to search for, discover and download data from the NCBI's databases (R Documentation)
#install.packages("rentrez")

library(Biostrings) #string containers, string matching algorithms, and other utilities, for fast manipulation of large biological sequences or sets of sequences (Bioconductor Documentation)
#install.packages("Biostrings")

library(DECIPHER) #toolset for deciphering and managing biological sequences (Bioconductor Documentation)
#install.packages("DECIPHER")

library(ape) #tools for Analyses of Phylogenetics and Evolution (R Documentation)
#install.packages("ape")

library(tidyverse) #collection of R packages designed for data science (Tidyverse Homepage)
#install.packages("tidyverse")

library(factoextra) #making easy to extract and visualize the output of exploratory multivariate data analyses (R Documentation)
#install.packages("factoextra")

library(cluster) #Methods for Cluster analysis (R Documentation)
#install.packages("cluster") 

library(ggpubr) #provides some easy-to-use functions for creating and customizing 'ggplot2'- based publication ready plots (R Documentation)
#install.packages("ggpubr")

library(gridExtra) #Provides a number of user-level functions to work with "grid" graphics, notably to arrange multiple grid-based plots on a page, and draw tables (R Documentation)
#install.packages("gridExtra")

library(muscle) #performs multiple sequence alignments of nucleotide or amino acid sequences (R Documentation)
#install.packages("muscle")

library(seqinr) #Exploratory data analysis and data visualization for biological sequence (DNA and protein) data (R Documentation)
#install.packages("seqinr")

#Citations generated with citation("package")

##-----------------------------COI GENE DATA ANALYSIS------------------------

##-------Preliminary Search and Visualization of Sequences

COI_search <- entrez_search(db = "nuccore", term = "Rana[ORGN] AND COI[GENE] AND 100:1000[SLEN]", retmax = 100) #general search for COI sequences for species in Rana genus in nucleotide database, NCBI; 100 to 1000bp (upper limit to avoid whole genomes)
COI_search #view search results
source("Entrez_Functions.R") #Load Entrez_Functions.R designed for fetching data from NCBI as web history objects (Acknowledgment_2)
FetchFastaFiles(searchTerm = "Rana[ORGN] AND COI[GENE] AND 100:1000[SLEN]", seqsPerFile = 200, fastaFileName = "test.COI") #fetching all sequences for COI gene for Rana species, 200 seqs per fasta file
test.COI <- MergeFastaFiles(filePattern = "test.COI") #merging fasta files generated in previous step into a df
View(test.COI) #check data
test.COI$Sequence <- DNAStringSet(test.COI$Sequence) #converting sequences into DNAStringSet from Biostrings
hist(nchar(test.COI$Sequence)) #fast visualization of distribution of retrieved sequence lengths
median(nchar(test.COI$Sequence)) #median of retrieved sequence lengths
names(test.COI$Sequence) <- test.COI$Title #assigning "Title" as names to the sequences
BrowseSeqs(test.COI$Sequence) #visualizing sequences in browser
rm(COI_search) #remove unnecessary data
rm(test.COI) #remove unnecessary data

#Based on the results of this preliminary search we have decided to restrict the data to sequences ranging from 600 to 700bp which is near the median (658bp) +- 50bp. We also decided to avoid fetching sequences that include the word "Anura sp." and "UNVERIFIED: Rana" as we only want verified species to test suitability of genes in classifying species based on clustering.

##--------Data Search for analysis

#COI hits on database "nuccore"
COI_search <- entrez_search(db = "nuccore", term = "Rana[ORGN] AND COI[GENE] AND 600:700[SLEN] NOT Anura sp. NOT UNVERIFIED: Rana", retmax = 100) #search for COI sequences for species in Rana genus in nucleotide database, NCBI with a lenght ranging from 600 to 700bp, avoiding records that include the word "Anura sp." and "NOT UNVERIFIED: Rana"
COI_search #view search results, 275 hits which is enough for the scope of this study

##--------Data Fetching for analysis

FetchFastaFiles(searchTerm = "Rana[ORGN] AND COI[GENE] AND 600:700[SLEN] NOT Anura sp. NOT UNVERIFIED: Rana", seqsPerFile = 200, fastaFileName = "seqs.COI") #fetching COI sequences for species in Rana genus in nucleotide database, NCBI with a lenght ranging from 600 to 700bp, avoiding records that include the word "Anura sp." and "NOT UNVERIFIED: Rana, 200 seqs per fasta file

stringSet.COI <- readDNAStringSet("seqs.COI0.fasta") #converting sequences only from file seqs.COI0 (200 seqs) into DNAStringSet from Biostrings and assigning them to stringSet.COI

#We have decided to have the same number of sequences between the two genes so we restricted the data to 200 seqs

##--------Data Exploration and Manipulation

dfCOI <- data.frame(COI_Title = names(stringSet.COI), COI_Sequence = paste(stringSet.COI)) #building a df with COI_Title as first col having the names of the sequences and COI_Sequence as the second col having the sequences as DNAStringSet.
rm(stringSet.COI) #removing unnecesary data

dfCOI$Species_Name <- word(dfCOI$COI_Title, 2L, 3L) #creating new col with only species name
dfCOI$Identifier_species_name <- word(dfCOI$COI_Title, 1L, 3L) #creating new col with identifier and species name
length(unique(dfCOI$Species_Name)) #retrieving number of unique species (R: 12 species)
unique(dfCOI$Species_Name) #viewing list of unique species

dfCOI <- dfCOI[, c("COI_Title", "Identifier_species_name", "COI_Sequence")] #modifying df, droping "Species_name" col
hist(nchar(dfCOI$COI_Sequence)) #fast visualization of distribution of retrieved sequence lengths

dfCOI$COI_Sequence <- DNAStringSet(dfCOI$COI_Sequence) #converting sequences into DNAStringSet from Biostrings as they were converted into characters in previous steps
class(dfCOI$COI_Sequence) #verifying class

names(dfCOI$COI_Sequence) <- dfCOI$Identifier_species_name #assigning "Identifier_species_name" as names to the sequences
BrowseSeqs(dfCOI$COI_Sequence) #visualizing sequences in browser

#Sequences have a very similar length, with a good classification of species and no missing data (high quality sequences) so we can go straight to the alignment step

##--------Sequence Alignment

#Variables
maxiters.COI <- 16 #Using default parameter, variable can be changed easily to test different parameters
gap.open.COI <- -400 #Using default parameter, variable can be changed easily to test different parameters

#ALignment
dfCOI.alignment <- DNAStringSet(muscle::muscle(dfCOI$COI_Sequence, gapopen = gap.open.COI, maxiters = maxiters.COI), use.names = TRUE) #alignment using muscle algorithm of DNA sequences, max iterations set to 16 and gap open penalty set up to -400
BrowseSeqs(dfCOI.alignment) #visualizing sequences after alignment in browser
length(dfCOI.alignment) #Chequing number of sequences

##--------Sequence CLustering

#Variables
missing.data.COI <- 0.01
length.var.COI <- 50
chosen.model.COI <- "TN93" #using recommended model for COI (Acknowledgment_1)
clustering.threshold.COI <- 0.1
clustering.method.COI <- "NJ"

#Clustering
dnaBin.COI <- as.DNAbin(dfCOI.alignment) #transforming sequences set into bins for clustering

distanceMatrix.COI <- dist.dna(dnaBin.COI, model = chosen.model.COI, as.matrix = TRUE, pairwise.deletion = TRUE) #computing a matrix array of pairwise distances from sequences 

clusters.COI <- IdClusters(distanceMatrix.COI, #grouping sequences into clusters of similarity 
                           method = clustering.method.COI,
                           cutoff = clustering.threshold.COI,
                           showPlot = TRUE,
                           type = "clusters",
                           verbose = TRUE) 
dend.COI <- IdClusters(distanceMatrix.COI, #creates a tree from a set of sequences
                           method = clustering.method.COI,
                           cutoff = clustering.threshold.COI,
                           showPlot = TRUE,
                           type = "dendrogram",
                           verbose = TRUE)  


#dendrogram object and clusters created, please check visualizations section to generate the respective dendrogram and silhouette plot for the sequences

##-----------------------------CYTB GENE DATA ANALYSIS-----------------------

##-------Preliminary Search and Visualization of Sequences

CYTB_search <- entrez_search(db = "nuccore", term = "Rana[ORGN] AND cytb[GENE] AND 100:1000[SLEN]", retmax = 100) #general search for CYTB sequences for species in Rana genus in nucleotide database, NCBI; 100 to 1000bp (upper limit to avoid whole genomes)
CYTB_search #view search results
FetchFastaFiles(searchTerm = "Rana[ORGN] AND cytb[GENE] AND 100:1000[SLEN]", seqsPerFile = 200, fastaFileName = "test.cytb") #fetching all sequences for CYTB gene for Rana species, 200 seqs per fasta file
test.CYTB <- MergeFastaFiles(filePattern = "test.cytb") #merging fasta files generated in previous step into a df
View(test.CYTB) #check data
test.CYTB$Sequence <- DNAStringSet(test.CYTB$Sequence) #converting sequences into DNAStringSet from Biostrings
hist(nchar(test.CYTB$Sequence)) #fast visualization of distribution of retrieved sequence lengths
median(nchar(test.CYTB$Sequence)) #median of retrieved sequence lengths
names(test.CYTB$Sequence) <- test.CYTB$Title #assigning "Title" as names to the sequences
BrowseSeqs(test.CYTB$Sequence) #visualizing sequences in browser
rm(CYTB_search) #remove unnecessary data
rm(test.CYTB) #remove unnecessary data

#Based on the results of this preliminary search we have decided to restrict the data to sequences ranging from 400 to 500bp which is near the median (476bp) +- 50bp. 

##--------Data Search for analysis

#Searching CYTB hits on database "nuccore"
CYTB_search <- entrez_search(db = "nuccore", term = "Rana[ORGN] AND cytb[GENE] AND 400:500[SLEN]", retmax = 100) #search for CYTB sequences for species in Rana genus in nucleotide database, NCBI with a lenght ranging from 400 to 500bp
CYTB_search #view search results, 212 hits which is enough for the scope of this study

##--------Data Fetching for analysis

#Fetching CYTB sequences
FetchFastaFiles(searchTerm = "Rana[ORGN] AND cytb[GENE] AND 400:500[SLEN]", seqsPerFile = 200, fastaFileName = "seqs.cytb") #fetching CYTB sequences for species in Rana genus in nucleotide database, NCBI with a lenght ranging from 400 to 500bp

stringSet.CYTB <- readDNAStringSet("seqs.cytb0.fasta") #converting sequences only from file seqs.CYTB0 (200 seqs) into DNAStringSet from Biostrings and assigning them to stringSet.CYTB

#We have decided to have the same number of sequences between the two genes so we restricted the data to 200 seqs

##--------Data Exploration and Manipulation

dfCYTB <- data.frame(CYTB_Title = names(stringSet.CYTB), CYTB_Sequence = paste(stringSet.CYTB)) #building a df with CYTB_Title as first col having the names of the sequences and CYTB_Sequence as the second col having the sequences as DNAStringSet.
rm(stringSet.CYTB) #removing unnecesary data

dfCYTB$Species_Name <- word(dfCYTB$CYTB_Title, 2L, 3L) #creating new col with only species name
dfCYTB$Identifier_species_name <- word(dfCYTB$CYTB_Title, 1L, 3L) #creating new col with identifier and species name
length(unique(dfCYTB$Species_Name)) #Number of unique species (R:10 species)
unique(dfCYTB$Species_Name) #Unique Species

dfCYTB <- dfCYTB[, c("CYTB_Title", "Identifier_species_name", "CYTB_Sequence")] #modifying df, droping "Species_name" col

hist(nchar(dfCYTB$CYTB_Sequence)) #fast visualization of distribution of retrieved sequence lengths

dfCYTB$CYTB_Sequence <- DNAStringSet(dfCYTB$CYTB_Sequence) #converting sequences into DNAStringSet from Biostrings as they were converted into characters in previous steps
class(dfCYTB$CYTB_Sequence) #verifying class

names(dfCYTB$CYTB_Sequence) <- dfCYTB$Identifier_species_name #assigning "Identifier_species_name" as names to the sequences
BrowseSeqs(dfCYTB$CYTB_Sequence) #visualizing sequences in browser

#Sequences have a very similar length, with a good classification of species and few missing data (high quality sequences) so we can go straight to the alignment step

##--------Sequence Alignment

#Variables
maxiters.CYTB <- 16 #Using default parameter, variable can be changed easily to test different parameters
gap.open.CYTB <- -400 #Using default parameter, variable can be changed easily to test different parameters

#ALignment
dfCYTB.alignment <- DNAStringSet(muscle::muscle(dfCYTB$CYTB_Sequence, gapopen = gap.open.CYTB, maxiters = maxiters.CYTB), use.names = TRUE) #alignment using muscle algorithm of DNA sequences, max iterations set to 16 and gap open penalty set up to -400
BrowseSeqs(dfCYTB.alignment) #visualizing sequences after alignment in browser
length(dfCOI.alignment) #Chequing number of sequences

length(dfCYTB.alignment) #How many sequences (rows)
length(dfCYTB.alignment[[1]]) #Lenght of sequence 1

##--------Sequence CLustering

#Variables
missing.data.CYTB <- 0.01
length.var.CYTB <- 50
chosen.model.CYTB <- "TN93" #using recommended model for COI (Acknowledgment_1)
clustering.threshold.CYTB <- 0.1
clustering.method.CYTB <- "NJ"
#Clustering
dnaBin.CYTB <- as.DNAbin(dfCYTB.alignment) #transforming sequences set into bins for clustering

distanceMatrix.CYTB <- dist.dna(dnaBin.CYTB, model = chosen.model.CYTB, as.matrix = TRUE, pairwise.deletion = TRUE) #computing a matrix array of pairwise distances from sequences 

clusters.CYTB <- IdClusters(distanceMatrix.CYTB, #grouping sequences into clusters of similarity 
                           method = clustering.method.CYTB,
                           cutoff = clustering.threshold.CYTB,
                           showPlot = TRUE,
                           type = "clusters",
                           verbose = TRUE)
dend.CYTB <- IdClusters(distanceMatrix.CYTB, #creating a tree from the set of sequences
                            method = clustering.method.CYTB,
                            cutoff = clustering.threshold.CYTB,
                            showPlot = TRUE,
                            asDendrogram = TRUE,
                            verbose = TRUE)

#dendrogram object and clusters created, please check visualizations section to generate the respective dendrogram and silhouette plot for the sequences

##-----------------------------VISUALIZATIONS--------------------------------

##--------Histograms of sequence lengths for COI and CYTB genes, median plotted as a red line
par(mfrow=c(1,2)) #Merge two plots in 1 row by 2cols
hist(nchar(dfCOI$COI_Sequence), #Histogram using base R, delimiting y axis
     main="COI gene", 
     xlab="Sequence length (bp)", 
     border="black",
     ylim = c(0,200),
     col="darkred")
abline(v = median(nchar(dfCOI$COI_Sequence)), # Add line for median
       col = "red",
       lwd = 3)
hist(nchar(dfCYTB$CYTB_Sequence), #Histogram using base R, delimiting y axis
     main="CYTB gene", 
     xlab="Sequence length (bp)", 
     border="black",
     ylim = c(0,200),
     col="darkred")
abline(v = median(nchar(dfCYTB$CYTB_Sequence)), # Add line for median
       col = "red",
       lwd = 3)
par(mfrow=c(1,1)) #reseting par for future plots

#Generating 1 image with two plots

##--------Silhouette plots of clusters formed using COI and CYTB genes
#COI Silhouette plot

sil.COI <- silhouette(clusters.COI$cluster,distanceMatrix.COI) #computing silhouette information based on clusters for COI
sil.CYTB <- silhouette(clusters.CYTB$cluster,distanceMatrix.CYTB) #computing silhouette information based on clusters for CYTB

p.sil.COI <- fviz_silhouette(sil.COI, palette = "Paired", title = "COI gene (average silhouette width: 0.91)") #using fviz to pass sil.obj generated in previous step for visualziation
p.sil.CYTB <- fviz_silhouette(sil.CYTB, palette = "Paired", title = "CYTB gene (average silhouette width: 0.70)") #using fviz to pass sil.obj generated in previous step for visualziation
ggpubr::ggarrange(p.sil.COI,p.sil.CYTB) #merging two plots
gridExtra::grid.arrange(p.sil.COI,p.sil.CYTB) #rearranging as 1 col 2 rows

#Generating 1 image with two plots

##--------Dendrograms calculated using genetic distances between sequences for COI and CYTB genes

nodePar <- list(lab.cex = 0.4, pch = c(NA, 19), 
                cex = 0.4, col = "blue") #Creating blue dots at the end of leaves and setting dots size and labels size

png("dendro.COI.png", width = 20, height = 15, units = 'in', res = 300) #generating a png file with specified width, height and resolution
plot(dend.COI,
     nodePar = nodePar, horiz = TRUE) #ploting dendrogram for COI
dev.off()

png("dendro.CYTB.png", width = 20, height = 15, units = 'in', res = 300) #generating a png file with specified width, height and resolution
plot(dend.CYTB,
     nodePar = nodePar, horiz = TRUE) # #ploting dendrogram for COI
dev.off()

#Generating 1 image for each plot, images exported to be able to differentiate labels
