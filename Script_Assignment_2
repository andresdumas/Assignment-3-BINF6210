############################################################################-
##-----------------------------ANALYSIS--------------------------------------
############################################################################-

##-----------------------------LIBRARIES-------------------------------------

library(rentrez) #Provides functions to search for, discover and download data from the NCBI's databases (R Documentation)
#install.packages("rentrez")

library(Biostrings) #string containers, string matching algorithms, and other utilities, for fast manipulation of large biological sequences or sets of sequences (Bioconductor Documentation)
#install.packages("Biostrings")

library(DECIPHER) #toolset for deciphering and managing biological sequences (Bioconductor Documentation)
#install.packages("DECIPHER")

library(ape) #tools for Analyses of Phylogenetics and Evolution (R Documentation)
#install.packages("ape")

library(tidyverse) #collection of R packages designed for data science (Tidyverse Homepage)
#install.packages("tidyverse")

library(factoextra) #making easy to extract and visualize the output of exploratory multivariate data analyses (R Documentation)
#install.packages("factoextra")

library(cluster) #Methods for Cluster analysis (R Documentation)
#install.packages("cluster") 

library(ggpubr) #provides some easy-to-use functions for creating and customizing 'ggplot2'- based publication ready plots (R Documentation)
#install.packages("ggpubr")

library(gridExtra) #Provides a number of user-level functions to work with "grid" graphics, notably to arrange multiple grid-based plots on a page, and draw tables (R Documentation)
#install.packages("gridExtra")

library(muscle) #performs multiple sequence alignments of nucleotide or amino acid sequences (R Documentation)
#install.packages("muscle")

library(seqinr) #Exploratory data analysis and data visualization for biological sequence (DNA and protein) data (R Documentation)
#install.packages("seqinr")

#Citations generated with citation("package")

##-----------------------------COI GENE DATA ANALYSIS------------------------

##-------Preliminary Search and Visualization of Sequences

COI_search <- entrez_search(db = "nuccore", term = "Rana[ORGN] AND COI[GENE] AND 100:1000[SLEN]", retmax = 100) #general search for COI sequences for species in Rana genus in nucleotide database, NCBI; 100 to 1000bp (upper limit to avoid whole genomes)
COI_search #view search results
source("Entrez_Functions.R") #Load Entrez_Functions.R designed for fetching data from NCBI as web history objects (Acknowledgment_2)
FetchFastaFiles(searchTerm = "Rana[ORGN] AND COI[GENE] AND 100:1000[SLEN]", seqsPerFile = 200, fastaFileName = "test.COI") #fetching all sequences for COI gene for Rana species, 200 seqs per fasta file
test.COI <- MergeFastaFiles(filePattern = "test.COI") #merging fasta files generated in previous step into a df
View(test.COI) #check data

##Neil P. -- Take the test.X dataset, generate a histogram for sequence length, report the median, and browse the sequence all in one function so we don't have to repeat code. This reduces the redundancy and hardcoding to make it easier to use other gene with dataframes in the format "variable.<GENE_NAME>"
qualitycheck <- function (test.GENE, browseseq = F){
  test_GENE_str <- deparse(substitute(test.GENE))
  gene_name <- tail(str_split(test_GENE_str, "\\.")[[1]], n=1)
  gene_hist <- hist(nchar(test.GENE$Sequence),
                    xlab = "Sequence Length (bp)",
                    main = paste("Distribution of", gene_name, "Sequence Length"))
  gene_med <- median(nchar(test.GENE$Sequence))
  abline(v=gene_med, col="red", lwd=3)
  text (0,gene_med, paste(gene_med))
  print (paste("The median sequence length for our", gene_name, "sequences is", gene_med))
  names(test.GENE$Sequence) <- test.GENE$Title
  
  #lets make browsing this sequence an optional parameter
  if (browseseq==T){
    BrowseSeqs(DNAStringSet(test.GENE$Sequence))
  }
}

qualitycheck(test.COI)

rm(COI_search) #remove unnecessary data
rm(test.COI) #remove unnecessary data

#Based on the results of this preliminary search we have decided to restrict the data to sequences ranging from 600 to 700bp which is near the median (658bp) +- 50bp. We also decided to avoid fetching sequences that include the word "Anura sp." and "UNVERIFIED: Rana" as we only want verified species to test suitability of genes in classifying species based on clustering.

##--------Data Search for analysis

#COI hits on database "nuccore"
COI_search <- entrez_search(db = "nuccore", term = "Rana[ORGN] AND COI[GENE] AND 600:700[SLEN] NOT Anura sp. NOT UNVERIFIED: Rana", retmax = 100) #search for COI sequences for species in Rana genus in nucleotide database, NCBI with a lenght ranging from 600 to 700bp, avoiding records that include the word "Anura sp." and "NOT UNVERIFIED: Rana"
COI_search #view search results, 275 hits which is enough for the scope of this study

##--------Data Fetching for analysis

FetchFastaFiles(searchTerm = "Rana[ORGN] AND COI[GENE] AND 600:700[SLEN] NOT Anura sp. NOT UNVERIFIED: Rana", seqsPerFile = 200, fastaFileName = "seqs.COI") #fetching COI sequences for species in Rana genus in nucleotide database, NCBI with a lenght ranging from 600 to 700bp, avoiding records that include the word "Anura sp." and "NOT UNVERIFIED: Rana, 200 seqs per fasta file

stringSet.COI <- readDNAStringSet("seqs.COI0.fasta") #converting sequences only from file seqs.COI0 (200 seqs) into DNAStringSet from Biostrings and assigning them to stringSet.COI

#We have decided to have the same number of sequences between the two genes so we restricted the data to 200 seqs

##--------Data Exploration and Manipulation

df.COI <- data.frame(COI_Title = names(stringSet.COI), Sequence = paste(stringSet.COI)) #building a df with COI_Title as first col having the names of the sequences and COI_Sequence as the second col having the sequences as DNAStringSet.
#rm(stringSet.COI) #removing unnecesary data

df.COI$Species_Name <- word(df.COI$COI_Title, 2L, 3L) #creating new col with only species name
df.COI$Title <- word(df.COI$COI_Title, 1L, 3L) #creating new col with identifier and species name
length(unique(df.COI$Species_Name)) #retrieving number of unique species (R: 12 species)
unique(df.COI$Species_Name) #viewing list of unique species

df.COI <- df.COI[, c("COI_Title", "Title", "Sequence")] #modifying df, droping "Species_name" col

##Neil P. -- new function
qualitycheck(df.COI)

#Sequences have a very similar length, with a good classification of species and no missing data (high quality sequences) so we can go straight to the alignment step

##--------Sequence Alignment

#Variables
maxiters.COI <- 16 #Using default parameter, variable can be changed easily to test different parameters
gap.open.COI <- -400 #Using default parameter, variable can be changed easily to test different parameters

#ALignment
df.COI.alignment <- DNAStringSet(muscle::muscle(DNAStringSet(df.COI$Sequence), gapopen = gap.open.COI, maxiters = maxiters.COI), use.names = TRUE) #alignment using muscle algorithm of DNA sequences, max iterations set to 16 and gap open penalty set up to -400
BrowseSeqs(df.COI.alignment) #visualizing sequences after alignment in browser
length(df.COI.alignment) #Chequing number of sequences

##--------Sequence CLustering

#Variables
missing.data.COI <- 0.01
length.var.COI <- 50
chosen.model.COI <- "TN93" #using recommended model for COI (Acknowledgment_1)
clustering.threshold.COI <- 0.1
clustering.method.COI <- "complete"

#Clustering
dnaBin.COI <- as.DNAbin(df.COI.alignment) #transforming sequences set into bins for clustering

distanceMatrix.COI <- dist.dna(dnaBin.COI, model = chosen.model.COI, as.matrix = TRUE, pairwise.deletion = TRUE) #computing a matrix array of pairwise distances from sequences 

clusters.COI <- IdClusters(distanceMatrix.COI, #grouping sequences into clusters of similarity 
                           method = clustering.method.COI,
                           cutoff = clustering.threshold.COI,
                           showPlot = FALSE,
                           type = "clusters",
                           verbose = TRUE) 



#dendrogram object and clusters created, please check visualizations section to generate the respective dendrogram and silhouette plot for the sequences

##-----------------------------CYTB GENE DATA ANALYSIS-----------------------

##-------Preliminary Search and Visualization of Sequences

CYTB_search <- entrez_search(db = "nuccore", term = "Rana[ORGN] AND cytb[GENE] AND 100:1000[SLEN]", retmax = 100) #general search for CYTB sequences for species in Rana genus in nucleotide database, NCBI; 100 to 1000bp (upper limit to avoid whole genomes)
CYTB_search #view search results
FetchFastaFiles(searchTerm = "Rana[ORGN] AND cytb[GENE] AND 100:1000[SLEN]", seqsPerFile = 200, fastaFileName = "test.cytb") #fetching all sequences for CYTB gene for Rana species, 200 seqs per fasta file
test.CYTB <- MergeFastaFiles(filePattern = "test.cytb") #merging fasta files generated in previous step into a df
View(test.CYTB) #check data

##Neil P -- Use our new function for CYTB
qualitycheck(test.CYTB)

rm(CYTB_search) #remove unnecessary data
rm(test.CYTB) #remove unnecessary data

#Based on the results of this preliminary search we have decided to restrict the data to sequences ranging from 400 to 500bp which is near the median (476bp) +- 50bp. 

##--------Data Search for analysis

#Searching CYTB hits on database "nuccore"
CYTB_search <- entrez_search(db = "nuccore", term = "Rana[ORGN] AND cytb[GENE] AND 400:500[SLEN]", retmax = 100) #search for CYTB sequences for species in Rana genus in nucleotide database, NCBI with a lenght ranging from 400 to 500bp
CYTB_search #view search results, 212 hits which is enough for the scope of this study

##--------Data Fetching for analysis

#Fetching CYTB sequences
FetchFastaFiles(searchTerm = "Rana[ORGN] AND cytb[GENE] AND 400:500[SLEN]", seqsPerFile = 200, fastaFileName = "seqs.cytb") #fetching CYTB sequences for species in Rana genus in nucleotide database, NCBI with a lenght ranging from 400 to 500bp

stringSet.CYTB <- readDNAStringSet("seqs.cytb0.fasta") #converting sequences only from file seqs.CYTB0 (200 seqs) into DNAStringSet from Biostrings and assigning them to stringSet.CYTB

#We have decided to have the same number of sequences between the two genes so we restricted the data to 200 seqs

##--------Data Exploration and Manipulation

df.CYTB <- data.frame(CYTB_Title = names(stringSet.CYTB), Sequence = paste(stringSet.CYTB)) #building a df with CYTB_Title as first col having the names of the sequences and CYTB_Sequence as the second col having the sequences as DNAStringSet.
rm(stringSet.CYTB) #removing unnecesary data

df.CYTB$Species_Name <- word(df.CYTB$CYTB_Title, 2L, 3L) #creating new col with only species name
df.CYTB$Title <- word(df.CYTB$CYTB_Title, 1L, 3L) #creating new col with identifier and species name
length(unique(df.CYTB$Species_Name)) #Number of unique species (R:10 species)
unique(df.CYTB$Species_Name) #Unique Species

df.CYTB <- df.CYTB[, c("CYTB_Title", "Title", "Sequence")] #modifying df, droping "Species_name" col

qualitycheck(df.CYTB)

#Sequences have a very similar length, with a good classification of species and few missing data (high quality sequences) so we can go straight to the alignment step

##--------Sequence Alignment

#Variables
maxiters.CYTB <- 16 #Using default parameter, variable can be changed easily to test different parameters
gap.open.CYTB <- -400 #Using default parameter, variable can be changed easily to test different parameters

#ALignment
df.CYTB.alignment <- DNAStringSet(muscle::muscle(DNAStringSet(df.CYTB$Sequence), gapopen = gap.open.CYTB, maxiters = maxiters.CYTB), use.names = TRUE) #alignment using muscle algorithm of DNA sequences, max iterations set to 16 and gap open penalty set up to -400
BrowseSeqs(df.CYTB.alignment) #visualizing sequences after alignment in browser
length(df.COI.alignment) #Chequing number of sequences

length(df.CYTB.alignment) #How many sequences (rows)
length(df.CYTB.alignment[[1]]) #Lenght of sequence 1

##--------Sequence CLustering

#Variables
missing.data.CYTB <- 0.01
length.var.CYTB <- 50
chosen.model.CYTB <- "TN93" #using recommended model for COI (Acknowledgment_1)
clustering.threshold.CYTB <- 0.1
clustering.method.CYTB <- "complete"
#Clustering
dnaBin.CYTB <- as.DNAbin(df.CYTB.alignment) #transforming sequences set into bins for clustering

distanceMatrix.CYTB <- dist.dna(dnaBin.CYTB, model = chosen.model.CYTB, as.matrix = TRUE, pairwise.deletion = TRUE) #computing a matrix array of pairwise distances from sequences 

clusters.CYTB <- IdClusters(distanceMatrix.CYTB, #grouping sequences into clusters of similarity 
                            method = clustering.method.CYTB,
                            cutoff = clustering.threshold.CYTB,
                            showPlot = FALSE,
                            type = "clusters",
                            verbose = TRUE)


#dendrogram object and clusters created, please check visualizations section to generate the respective dendrogram and silhouette plot for the sequences

##-----------------------------VISUALIZATIONS--------------------------------

##--------Histograms of sequence lengths for COI and CYTB genes, median plotted as a red line
par(mfrow=c(1,2)) #Merge two plots in 1 row by 2cols
hist(nchar(df.COI$Sequence), #Histogram using base R, delimiting y axis
     main="COI gene", 
     xlab="Sequence length (bp)", 
     border="black",
     ylim = c(0,200),
     col="darkred")
abline(v = median(nchar(df.COI$Sequence)), # Add line for median
       col = "red",
       lwd = 3)
hist(nchar(df.CYTB$Sequence), #Histogram using base R, delimiting y axis
     main="CYTB gene", 
     xlab="Sequence length (bp)", 
     border="black",
     ylim = c(0,200),
     col="darkred")
abline(v = median(nchar(df.CYTB$Sequence)), # Add line for median
       col = "red",
       lwd = 3)
par(mfrow=c(1,1)) #reseting par for future plots

#Generating 1 image with two plots


#Neil P. -- We will use fviz_dend instead of IdClusters() to generate our dendrograms.This function gives us more freedom to adjust our dendrogram. For example, let's remove the labels and colour code the dendrogram so we can still visualize any patterns while still having it look neat. The goal here is to improve the dendrogram figures to make it fit for a publication. Note: "complete" is the clustering method used, not NJ, due to the clustering method limitations on fviz_dend.Our silhouette plots will reflect this same method as well.


#Form clusters for our dendrogram
COI.cut <- hcut(distanceMatrix.COI, k = 11, hc_method = "complete")

#Now we can plot our dendrogram. To add to our colour coordination, lets use filled rectangles to group the tips by cluster.
dend.COI <-fviz_dend(COI.cut, show_labels = FALSE, rect = T,palette="Paired",
                     lower_rect=-0.1, main = "Dendrogram of COI clusters, k=11", rect_fill =T,
                     rect_border= "Paired")


#And the same for CYTB
CYTB.cut <- hcut(distanceMatrix.CYTB, k = 12, hc_method = "complete")
dend.CYTB <- fviz_dend(CYTB.cut, show_labels = FALSE, rect = T,palette="Paired",
                       lower_rect=-0.1, main = "Dendrogram of CYTB clusters, k=12", rect_fill =T,
                       rect_border= "Paired")
#Neil P. -- values like cluster size are hard-coded, but the function below will fix this

plot(dend.COI)
plot(dend.CYTB)

##--------Silhouette plots of clusters formed using COI and CYTB genes
#COI Silhouette plot

#Neil P. -- Lets create function that generates dendrogram AND silhouette plot for a given gene. Our plots will even have appropriate titles based on the arguments. This edit both reduces code redundancy AND produces meaningful figures, as we can generate two related plots for a single gene with one function. We will specify the gene name as a string, and provide the cluster and distance matrix variable

#First lets remove the plot variables. These will be restored later with our function
rm(dend.COI)
rm(dend.CYTB)


#Create our plotting function
plot_sil_dend <- function(gene_name, clusters, distmatrix){
  
  ##First generate our silhouette plot. Create silhouette variable and specify title
  sil.GENE <- silhouette(clusters$cluster,distmatrix)
  avg.width <- round(mean(sil.GENE[,3]),2)
  silplot_title <- paste0(gene_name, " gene (average silhouette width:", avg.width, ")")
  #This code generates our silhouette plot
  p.sil.GENE <- fviz_silhouette(sil.GENE, palette = "Paired", title = silplot_title)
  #Here, we want to save our plot in the global environment, we can do so with assign()
  var_name <- paste0("p.sil.",gene_name)
  print (paste("Silhouette plot stored as",var_name))
  assign(var_name, p.sil.GENE, envir=.GlobalEnv)
  
  ###Generate a dendrogram given the arguments, and specify title
  k.GENE <- length(unique(clusters$cluster))
  GENE.cut <- hcut(distmatrix, k = k.GENE, hc_method = "complete")
  dend_title <- paste0("Dendrogram of COI clusters, k=", k.GENE)
  dend.GENE <- fviz_dend(GENE.cut, show_labels = FALSE, rect = T, palette="Paired",
                         lower_rect=-0.1, main = dend_title, rect_fill =T,
                         rect_border= "Paired")
  #Again, save our dendrogem in the global environment
  var_name2 <- paste0("dend.", gene_name)
  print (paste("Dendrogram stored as",var_name))
  assign(var_name2, dend.GENE, envir=.GlobalEnv)
  
  #This will allow us to plot both the dendrogram and silhouette. Due to the same palette used, the clusters are colour coordinated between plots!
  ggpubr::ggarrange(dend.GENE,p.sil.GENE)
  gridExtra::grid.arrange(dend.GENE,p.sil.GENE)
}


#Take a look
plot_sil_dend("COI", clusters.COI, distanceMatrix.COI)
plot_sil_dend("CYTB", clusters.CYTB, distanceMatrix.CYTB)
#There is a lot of information on these plots, so it is best to view these full screen

#Also, now the plots are in our global environment if you want to view individually, without having to run the function again.
plot(dend.COI)
plot(p.sil.COI)
plot(dend.CYTB)
plot(p.sil.CYTB)
